parameters:
- name: vmImage
  displayName: 'Pool VM image'
  type: string
  default: 'ubuntu-latest'

- name: environmentName
  displayName: 'Environment name'
  type: string
  default: ''

- name: ciPipelineResourceName
  displayName: 'CI pipeline resource name'
  type: string
  default: 'ci'

- name: artifactName
  displayName: 'Terraform artifact name'
  type: string
  default: 'terraform'

- name: workingDirectoryPath
  displayName: 'Path to Terraform folder'
  type: string
  default: ''

- name: azureServiceConnectionName
  displayName: 'Backend Azure Service Connection'
  type: string
  default: ''

- name: azureResourceGroupName
  displayName: 'Azure Resource Group Name'
  type: string
  default: ''

- name: azureResourceGroupLocation
  displayName: 'Azure Resource Group Location'
  type: string
  default: 'westeurope'

- name: azureStorageAccountName
  displayName: 'Azure Storage Account Name'
  type: string
  default: ''

- name: azureStorageContainerName
  displayName: 'Azure Storage Container Name'
  type: string
  default: ''

- name: planCommandVariables
  displayName: 'Plan command variables'
  type: string
  default: ''

- name: notifyUsers
  displayName: 'Notify users'
  type: string
  default: '[$(System.TeamProject)]\Build Administrators'

jobs:
- deployment: TerraformPlan
  displayName: 'Terraform plan'
  pool:
    vmImage: ${{ parameters.vmImage }}
  environment: ${{ parameters.environmentName }}
  variables:
    artifactWorkingDirectory: '$(Pipeline.Workspace)/${{ parameters.ciPipelineResourceName }}/${{ parameters.artifactName }}/${{ parameters.workingDirectoryPath }}'
  strategy:
    runOnce:
      deploy:
        steps:
        - download: ${{ parameters.ciPipelineResourceName }}
          displayName: 'Download artifact: ${{ parameters.artifactName }}'
          artifact: ${{ parameters.artifactName }}

        - task: TerraformInstaller@0
          displayName: 'Install Terraform'
          inputs:
            terraformVersion: 'latest'

        - task: TerraformCLI@0
          displayName: 'Terraform init'
          inputs:
            command: 'init'
            workingDirectory: '$(artifactWorkingDirectory)'
            backendType: 'azurerm'
            backendServiceArm: '${{ parameters.azureServiceConnectionName }}'
            ensureBackend: false
            backendAzureRmResourceGroupName: '${{ parameters.azureResourceGroupName }}'
            backendAzureRmResourceGroupLocation: '${{ parameters.azureResourceGroupLocation }}'
            backendAzureRmStorageAccountName: '${{ parameters.azureStorageAccountName }}'
            backendAzureRmContainerName: '${{ parameters.azureStorageContainerName }}'
            commandOptions: '-input=false'

        - task: TerraformCLI@0
          displayName: 'Terraform plan'
          inputs:
            command: 'plan'
            workingDirectory: '$(artifactWorkingDirectory)'
            environmentServiceName: '${{ parameters.azureServiceConnectionName }}'
            publishPlanResults: '${{ parameters.environmentName }}.tfplan'
            commandOptions: '-out=$(artifactWorkingDirectory)/${{ parameters.environmentName }}.tfplan -input=false -detailed-exitcode ${{ parameters.planCommandVariables }}'

        - task: TerraformCLI@0
          displayName: 'Terraform show'
          condition: |
            and
            (
              succeeded(),
              eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true')
            )
          inputs:
            command: 'show'
            workingDirectory: '$(artifactWorkingDirectory)'
            inputTargetPlanOrStateFilePath: '$(artifactWorkingDirectory)/${{ parameters.environmentName }}.tfplan'

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Terraform plan in artifacts'
          condition: |
            and
            (
              succeeded(),
              eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true')
            )
          inputs:
            pathtoPublish: '$(artifactWorkingDirectory)'
            artifactName: 'tfplan'

        - bash: |
            echo "##vso[task.setvariable variable=HAS_CHANGES;isoutput=true;isreadonly=true]$TERRAFORM_PLAN_HAS_CHANGES"
            echo "##vso[task.setvariable variable=HAS_DESTROY_CHANGES;isoutput=true;isreadonly=true]$TERRAFORM_PLAN_HAS_DESTROY_CHANGES"
          displayName: 'Set Terraform plan output variables'
          condition: |
            and
            (
              succeeded(),
              eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true')
            )
          name: tfplanOutput

- job: TerraformValidate
  displayName: 'Terraform validate'
  pool: server
  timeoutInMinutes: 7200 # job times out in 5 days
  dependsOn: TerraformPlan
  condition: |
    and
    (
      succeeded(),
      eq(dependencies.TerraformPlan.outputs['TerraformPlan.tfplanOutput.HAS_DESTROY_CHANGES'], 'true')
    )
  steps:
  - task: ManualValidation@0
    displayName: 'Manual validation'
    timeoutInMinutes: 4320 # task times out in 3 days
    inputs:
      notifyUsers: '${{ parameters.notifyUsers }}'
      instructions: 'Terraform plan has DESTROY changes, please review: ${{ parameters.environmentName }}.tfplan'

- job: TerraformApply
  displayName: 'Terraform apply'
  pool:
    vmImage: ${{ parameters.vmImage }}
  dependsOn: TerraformValidate
  condition: in(dependencies.TerraformValidate.result, 'Succeeded', 'Skipped')
  variables:
    artifactWorkingDirectory: '$(Pipeline.Workspace)/tfplan'
  steps:
  - checkout: none

  - download: current
    displayName: 'Download artifact'
    artifact: tfplan

  - task: TerraformInstaller@0
    displayName: 'Install Terraform'
    inputs:
      terraformVersion: 'latest'

  - task: TerraformCLI@0
    displayName: 'Terraform apply'
    inputs:
      command: 'apply'
      workingDirectory: '$(artifactWorkingDirectory)'
      environmentServiceName: '${{ parameters.azureServiceConnectionName }}'
      commandOptions: '-input=false $(artifactWorkingDirectory)/${{ parameters.environmentName }}.tfplan'
