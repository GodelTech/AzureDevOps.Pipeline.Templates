parameters:
- name: vmImage
  displayName: 'Pool VM image'
  type: string
  default: 'ubuntu-latest'

- name: environmentName
  displayName: 'Environment name'
  type: string
  default: ''

- name: ciPipelineResourcesName
  displayName: 'CI pipeline resources name'
  type: string
  default: 'ci'

- name: artifactName
  displayName: 'Terraform artifact name'
  type: string
  default: 'terraform'

- name: workingDirectoryPath
  displayName: 'Path to Terraform folder'
  type: string
  default: ''

- name: azureServiceConnectionName
  displayName: 'Backend Azure Service Connection'
  type: string
  default: ''

- name: azureResourceGroupName
  displayName: 'Azure Resource Group Name'
  type: string
  default: ''

- name: azureResourceGroupLocation
  displayName: 'Azure Resource Group Location'
  type: string
  default: 'westeurope'

- name: azureStorageAccountName
  displayName: 'Azure Storage Account Name'
  type: string
  default: ''

- name: azureStorageContainerName
  displayName: 'Azure Storage Container Name'
  type: string
  default: ''

- name: planCommandVariables
  displayName: 'Plan command variables'
  type: string
  default: ''

- name: notifyUsers
  displayName: 'Notify users'
  type: string
  default: '[$(System.TeamProject)]\Build Administrators'

jobs:
- deployment: Terraform
  displayName: 'Terraform'
  pool:
    vmImage: ${{ parameters.vmImage }}
  environment: ${{ parameters.environmentName }}
  variables:
    artifactWorkingDirectory: '$(Pipeline.Workspace)/${{ parameters.ciPipelineResourcesName }}/${{ parameters.artifactName }}'
  strategy:
    runOnce:
      deploy:
        steps:
        - download: ci
          displayName: 'Download artifact: ${{ parameters.artifactName }}'
          artifact: ${{ parameters.artifactName }}

        - task: TerraformInstaller@0
          displayName: 'Install Terraform'
          inputs:
            terraformVersion: 'latest'

        - task: TerraformCLI@0
          displayName: 'Terraform init'
          inputs:
            command: 'init'
            workingDirectory: '$(artifactWorkingDirectory)/${{ parameters.workingDirectoryPath }}'
            backendType: 'azurerm'
            backendServiceArm: '${{ parameters.azureServiceConnectionName }}'
            ensureBackend: true
            backendAzureRmResourceGroupName: '${{ parameters.azureResourceGroupName }}'
            backendAzureRmResourceGroupLocation: '${{ parameters.azureResourceGroupLocation }}'
            backendAzureRmStorageAccountName: '${{ parameters.azureStorageAccountName }}'
            backendAzureRmContainerName: '${{ parameters.azureStorageContainerName }}'
            commandOptions: '-input=false'

        - task: TerraformCLI@0
          displayName: 'Terraform plan'
          inputs:
            command: 'plan'
            workingDirectory: '$(artifactWorkingDirectory)/${{ parameters.workingDirectoryPath }}'
            environmentServiceName: '${{ parameters.azureServiceConnectionName }}'
            publishPlanResults: '${{ parameters.environmentName }}.tfplan'
            commandOptions: '-out=${{ parameters.environmentName }}.tfplan -input=false -detailed-exitcode ${{ parameters.planCommandVariables }}'

        - task: TerraformCLI@0
          displayName: 'Terraform show'
          condition: |
            and
            (
              succeeded(),
              eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true')
            )
          inputs:
            command: show
            workingDirectory: '$(artifactWorkingDirectory)/${{ parameters.workingDirectoryPath }}'
            inputTargetPlanOrStateFilePath: '${{ parameters.environmentName }}.tfplan'

        - task: TerraformCLI@0
          displayName: 'Terraform apply'
          condition: |
            and
            (
              succeeded(),
              eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true')
            )
          inputs:
            command: 'apply'
            workingDirectory: '$(artifactWorkingDirectory)/${{ parameters.workingDirectoryPath }}'
            environmentServiceName: '${{ parameters.azureServiceConnectionName }}'
            commandOptions: '-input=false ${{ parameters.environmentName }}.tfplan'
