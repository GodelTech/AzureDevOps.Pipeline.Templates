parameters:
- name: buildConfiguration
  displayName: 'Build configuration'
  type: string
  default: 'production'

- name: preBuildSteps
  displayName: 'Steps to run before build'
  type: stepList
  default: []

- name: appName
  displayName: 'Angular application name'
  type: string
  default: 'app'

- name: appSourcePath
  displayName: 'Angular application source path'
  type: string
  default: 'src'

- name: enableSonarCloud
  displayName: 'Enable SonarCloud'
  type: boolean
  default: true

- name: sonarCloudOrganizationName
  displayName: 'Organization name for SonarCloud'
  type: string
  default: ''

- name: sonarCloudProjectKey
  displayName: 'Project key for SonarCloud'
  type: string
  default: ''

- name: sonarCloudProjectName
  displayName: 'Project name for SonarCloud'
  type: string
  default: ''

- name: nodeToolVersions
  displayName: 'Node.js versions'
  type: object
  default: []

- name: continueOnErrorTypeScript
  displayName: 'Continue build if TypeScript compilation failed'
  type: boolean
  default: false

- name: continueOnErrorNpmValidationOutdatedPackages
  displayName: 'Continue build if npm validation found outdated packages'
  type: boolean
  default: true

- name: checkWarnings
  displayName: 'Check warnings'
  type: boolean
  default: true

- name: checkCoverage
  displayName: 'Check code coverage'
  type: boolean
  default: true

- name: includeSonarcloudBuildBreaker
  displayName: 'Does Sonarcloud build breaker turn on?'
  type: boolean
  default: true

- name: checkMutationTesting
  displayName: 'Check mutation testing'
  type: boolean
  default: true

steps:
- ${{ each step in parameters.preBuildSteps }}:
  - ${{ each pair in step }}:
      ${{ if ne(pair.value, 'script') }}:
        ${{ pair.key }}: ${{ pair.value }}
      ${{ if eq(pair.value, 'script') }}:
        ${{ pair.key }}: ${{ pair.value }}
      ${{ if eq(pair.value, 'task') }}:
        # Step is rejected by raising a YAML syntax error: Unexpected value 'task'
        '${{ pair.value }}': error

- task: SonarCloudPrepare@2
  displayName: 'Prepare analysis on SonarCloud'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.enableSonarCloud }}, true)
    )
  inputs:
    SonarCloud: 'SonarCloud'
    organization: '${{ parameters.sonarCloudOrganizationName }}'
    scannerMode: 'CLI'
    cliSources: '$(Build.SourcesDirectory)'
    cliProjectKey: '${{ parameters.sonarCloudProjectKey }}'
    cliProjectName: '${{ parameters.sonarCloudProjectName }}'
    configMode: 'manual'
    extraProperties: |
      sonar.sources=${{ parameters.appSourcePath }}
      sonar.inclusions=${{ parameters.appSourcePath }}/**/*.ts,${{ parameters.appSourcePath }}/**/*.scss,${{ parameters.appSourcePath }}/**/*.html
      sonar.exclusions=**/node_modules/**,${{ parameters.appSourcePath }}/**/*.spec.ts
      sonar.tests=${{ parameters.appSourcePath }}
      sonar.test.inclusions=${{ parameters.appSourcePath }}/**/*.spec.ts
      sonar.typescript.tsconfigPath=tsconfig.json

      sonar.coverage.exclusions=${{ parameters.appSourcePath }}/bootstrap.ts,${{ parameters.appSourcePath }}/main.ts,${{ parameters.appSourcePath }}/polyfills.ts,${{ parameters.appSourcePath }}/test.ts,${{ parameters.appSourcePath }}/**/*environment*.ts,${{ parameters.appSourcePath }}/**/*module.ts

      sonar.javascript.lcov.reportPaths=$(Build.SourcesDirectory)/coverage/${{ parameters.appName }}/lcov/lcov.info
      
      sonar.testExecutionReportPaths=$(Build.SourcesDirectory)/TestResults/${{ parameters.appName }}/SonarQube/SonarQube.xml

- ${{ if eq(length(parameters.nodeToolVersions), 0) }}:
  - task: NodeTool@0
    displayName: 'Use Node.js 20.x'
    inputs:
      versionSpec: '20.x'
      checkLatest: true

- ${{ each nodeToolVersion in parameters.nodeToolVersions }}:
  - task: NodeTool@0
    displayName: 'Use Node.js ${{ nodeToolVersion }}'
    inputs:
      versionSpec: ${{ nodeToolVersion }}
      checkLatest: true

- task: Npm@1
  displayName: 'Install Angular CLI'
  inputs:
    command: 'custom'
    customCommand: 'install -g @angular/cli'

- task: Npm@1
  displayName: 'npm version'
  condition: |
    and
    (
      succeeded(),
      ne(variables.gitVersion, '')
    )
  inputs:
    command: 'custom'
    customCommand:
      '
        version $(gitVersion)
          --allow-same-version=true
          --commit-hooks=false
          --git-tag-version=false
      '

- task: Npm@1
  displayName: 'Install packages'
  inputs:
    command: 'ci'

- task: Npm@1
  displayName: 'Build'
  inputs:
    command: 'custom'
    customCommand:
      '
        run ng build ${{ parameters.appName }}
          --
          --configuration ${{ parameters.buildConfiguration }}
      '

- task: Npm@1
  displayName: "Run lint"
  inputs:
    command: 'custom'
    customCommand: 'run ng lint ${{ parameters.appName }}'

- template: 'TypeScript/validation.yml'
  parameters:
    continueOnErrorTypeScript: ${{ parameters.continueOnErrorTypeScript }}

- template: 'npm/validation.yml'
  parameters:
    continueOnErrorNpmValidationOutdatedPackages: ${{ parameters.continueOnErrorNpmValidationOutdatedPackages }}

- task: Npm@1
  displayName: 'Run tests'
  inputs:
    command: 'custom'
    customCommand:
      '
        run ng test ${{ parameters.appName }}
          --
          --browsers=ChromeHeadless
          --code-coverage=true
          --watch=false
      '

- task: PublishTestResults@2
  displayName: "Publish test results"
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(Build.SourcesDirectory)/TestResults/${{ parameters.appName }}/junit/TESTS*.xml'
    mergeTestResults: true

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage reports'
  condition: succeededOrFailed()
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/coverage/${{ parameters.appName }}/cobertura/cobertura-coverage.xml'

- task: SonarCloudAnalyze@2
  displayName: 'Run Code Analysis'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.enableSonarCloud }}, true)
    )

- task: SonarCloudPublish@2
  displayName: 'Publish Quality Gate Result'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.enableSonarCloud }}, true)
    )
  inputs:
    pollingTimeoutSec: '300'

- template: 'Stryker/mutation-testing.yml'
  parameters:
    appName: ${{ parameters.appName }}

- task: BuildQualityChecks@8
  displayName: 'Warnings quality check'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.checkWarnings }}, true)
    )
  inputs:
    checkWarnings: true
    warningFailOption: 'fixed'
    warningThreshold: '0'
    showStatistics: true

- task: BuildQualityChecks@8
  displayName: 'Line Code coverage quality check'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.checkCoverage }}, true)
    )
  inputs:
    checkCoverage: true
    coverageFailOption: 'fixed'
    coverageType: 'lines'
    treat0of0as100: true
    coverageThreshold: '80'

- task: BuildQualityChecks@8
  displayName: 'Branch Code coverage quality check'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.checkCoverage }}, true)
    )
  inputs:
    checkCoverage: true
    coverageFailOption: 'fixed'
    coverageType: 'branches'
    treat0of0as100: true
    coverageThreshold: '80'

- task: sonarcloud-buildbreaker@2
  displayName: 'Break build on quality gate failure'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.enableSonarCloud }}, true),
      eq(${{ parameters.includeSonarcloudBuildBreaker }}, true)
    )
  inputs:
    SonarCloud: 'SonarCloud'
    organization: '${{ parameters.sonarCloudOrganizationName }}'

- template: 'Stryker/validation.yml'
  parameters:
    checkMutationTesting: ${{ parameters.checkMutationTesting }}