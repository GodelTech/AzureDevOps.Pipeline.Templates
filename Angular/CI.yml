parameters:
- name: vmImage
  displayName: 'Pool VM image'
  type: string
  default: 'ubuntu-latest'

- name: terraformRootFolderPath
  displayName: 'Terraform root folder path'
  type: string
  default: '.terraform'

- name: terraformEnvironmentFolderPaths
  displayName: 'List of Terraform environment folder paths'
  type: object
  default: []

- name: terraformArtifactName
  displayName: 'Terraform artifact name'
  type: string
  default: 'terraform'

- name: buildConfiguration
  displayName: 'Build configuration'
  type: string
  default: 'production'

- name: preBuildSteps
  displayName: 'Steps to run before build'
  type: stepList
  default: []

- name: appName
  displayName: 'Angular application name'
  type: string
  default: 'app'

- name: appSourcePath
  displayName: 'Angular application source path'
  type: string
  default: 'src'

- name: enableSonarCloud
  displayName: 'Enable SonarCloud'
  type: boolean
  default: true

- name: sonarCloudOrganizationName
  displayName: 'Organization name for SonarCloud'
  type: string
  default: ''

- name: sonarCloudProjectKey
  displayName: 'Project key for SonarCloud'
  type: string
  default: ''

- name: sonarCloudProjectName
  displayName: 'Project name for SonarCloud'
  type: string
  default: ''

- name: nodeToolVersions
  displayName: 'Node.js versions'
  type: object
  default: []

- name: continueOnErrorTypeScript
  displayName: 'Continue build if TypeScript compilation failed'
  type: boolean
  default: false

- name: continueOnErrorNpmValidationOutdatedPackages
  displayName: 'Continue build if npm validation found outdated packages'
  type: boolean
  default: true

- name: checkWarnings
  displayName: 'Check warnings'
  type: boolean
  default: true

- name: checkCoverage
  displayName: 'Check code coverage'
  type: boolean
  default: true

- name: includeSonarcloudBuildBreaker
  displayName: 'Does Sonarcloud build breaker turn on?'
  type: boolean
  default: true

- name: checkMutationTesting
  displayName: 'Check mutation testing'
  type: boolean
  default: true

- name: projectArtifactName
  displayName: 'Project artifact name'
  type: string
  default: 'project'

stages:
- stage: Build
  displayName: 'Build'

  jobs:
  - template: '../Terraform/CI.yml'
    parameters:
      rootFolderPath: ${{ parameters.terraformRootFolderPath }}
      environmentFolderPaths: ${{ parameters.terraformEnvironmentFolderPaths }}
      artifactName: ${{ parameters.terraformArtifactName }}

  - job: Build
    displayName: 'Build'
    pool:
      vmImage: ${{ parameters.vmImage }}
    dependsOn: Terraform
    condition: in(dependencies.Terraform.result, 'Succeeded', 'SucceededWithIssues')
    steps:
    - template: 'build.yml'
      parameters:
        buildConfiguration: ${{ parameters.buildConfiguration }}
        preBuildSteps: ${{ parameters.preBuildSteps }}
        appName: ${{ parameters.appName }}
        appSourcePath: ${{ parameters.appSourcePath }}
        enableSonarCloud: ${{ parameters.enableSonarCloud }}
        sonarCloudOrganizationName: ${{ parameters.sonarCloudOrganizationName }}
        sonarCloudProjectKey: ${{ parameters.sonarCloudProjectKey }}
        sonarCloudProjectName: ${{ parameters.sonarCloudProjectName }}
        nodeToolVersions: ${{ parameters.nodeToolVersions }}
        continueOnErrorTypeScript: ${{ parameters.continueOnErrorTypeScript }}
        continueOnErrorNpmValidationOutdatedPackages: ${{ parameters.continueOnErrorNpmValidationOutdatedPackages }}
        checkWarnings: ${{ parameters.checkWarnings }}
        checkCoverage: ${{ parameters.checkCoverage }}
        includeSonarcloudBuildBreaker: ${{ parameters.includeSonarcloudBuildBreaker }}
        checkMutationTesting: ${{ parameters.checkMutationTesting }}

    - template: 'publish.yml'
      parameters:
        buildOutputPath: 'dist/${{ parameters.appName }}'
        projectArtifactName: ${{ parameters.projectArtifactName }}
