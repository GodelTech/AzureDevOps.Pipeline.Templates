parameters:
- name: buildConfiguration
  displayName: 'Build configuration'
  type: string
  default: 'Release'

- name: isWebProjects
  displayName: 'Is web project'
  type: boolean
  default: true

- name: projects
  displayName: 'The path to the csproj file(s) to use'
  type: string
  default: '**/*.csproj'

- name: projectArtifactName
  displayName: 'Project artifact name'
  type: string
  default: 'project'

steps:
- task: Bash@3
  displayName: 'Set publish version parameters'
  inputs:
    targetType: 'inline'
    script: |
      publishVersionParameter=''
      publishInformationalVersionParameter=''
      
      if ! [[ -z "$(gitVersion)" ]]; then
        publishVersionParameter='/p:Version="$(gitVersion)"'
      fi

      if ! [[ -z "$(gitInformationalVersion)" ]]; then
        publishInformationalVersionParameter='/p:InformationalVersion="$(gitInformationalVersion)"'
      fi

      echo "##vso[task.setvariable variable=DOTNET_PUBLISH_VERSION_PARAMETER;]$publishVersionParameter"
      echo "##vso[task.setvariable variable=DOTNET_PUBLISH_INFORMATIONAL_VERSION_PARAMETER;]$publishInformationalVersionParameter"

- task: DotNetCoreCLI@2
  displayName: 'Publish application'
  inputs:
    command: 'publish'
    publishWebProjects: ${{ parameters.isWebProjects }}
    projects: ${{ parameters.projects }}
    arguments: >-
      --configuration ${{ parameters.buildConfiguration }}
      $(DOTNET_PUBLISH_VERSION_PARAMETER)
      $(DOTNET_PUBLISH_INFORMATIONAL_VERSION_PARAMETER)
      --output $(Build.ArtifactStagingDirectory)/${{ replace(variables['Build.Repository.Name'], '/', '_') }}_$(Build.BuildNumber)
    modifyOutputPath: false
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish application in artifacts'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/${{ replace(variables[''Build.Repository.Name''], ''/'', ''_'') }}_$(Build.BuildNumber)'
    artifactName: ${{ parameters.projectArtifactName }}
