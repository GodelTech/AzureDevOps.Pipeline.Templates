parameters:
- name: buildConfiguration
  displayName: 'Build configuration'
  type: string
  default: 'Release'

- name: gitVersion
  displayName: 'Git version'
  type: string
  default: ''

- name: gitInformationalVersion
  displayName: 'Git informational version'
  type: string
  default: ''

- name: isWebProjects
  displayName: 'Is web project'
  type: boolean
  default: true

- name: projects
  displayName: 'The path to the csproj file(s) to use'
  type: string
  default: '**/*.csproj'

- name: projectArtifactName
  displayName: 'Project artifact name'
  type: string
  default: 'project'

steps:
- task: DotNetCoreCLI@2
  displayName: 'Publish application'
  inputs:
    command: 'publish'
    publishWebProjects: ${{ parameters.isWebProjects }}
    projects: ${{ parameters.projects }}
    ${{ if eq(parameters.gitVersion, '') }}:
      arguments: >-
        --configuration ${{ parameters.buildConfiguration }}
        --output $(Build.ArtifactStagingDirectory)/${{ replace(variables['Build.Repository.Name'], '/', '_') }}_$(Build.BuildNumber)
    ${{ else }}:
      arguments: >-
        --configuration ${{ parameters.buildConfiguration }}
        /p:Version="${{ parameters.gitVersion }}"
        /p:InformationalVersion="${{ coalesce(parameters.gitInformationalVersion, parameters.gitVersion) }}"
        --output $(Build.ArtifactStagingDirectory)/${{ replace(variables['Build.Repository.Name'], '/', '_') }}_$(Build.BuildNumber)
    modifyOutputPath: false
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish application in artifacts'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/${{ replace(variables[''Build.Repository.Name''], ''/'', ''_'') }}_$(Build.BuildNumber)'
    artifactName: ${{ parameters.projectArtifactName }}
