parameters:
- name: vmImage
  displayName: 'Pool VM image'
  type: string
  default: 'ubuntu-latest'

- name: environmentName
  type: string
  default: ''

- name: ciPipelineResourceName
  displayName: 'CI pipeline resource name'
  type: string
  default: 'ci'

- name: dependsOn
  displayName: 'Depends On'
  type: object
  default: []

- name: condition
  displayName: 'Condition'
  type: string
  default: 'succeeded()'

- name: azureServiceConnectionName
  displayName: 'Name of connection to Azure'
  type: string
  default: ''

- name: resourceGroupName
  type: string
  default: ''

- name: appName
  type: string
  default: ''

- name: generalSettings
  type: string
  default: ''

- name: connectionStrings
  type: string
  default: ''

- name: appSettings
  type: string
  default: ''

- name: projectArtifactName
  displayName: 'Project artifact name'
  type: string
  default: 'project'

- name: migrationArtifactName
  displayName: 'Migrations artifact name'
  type: string
  default: 'migrations'

- name: migrationSqlServerName
  displayName: 'Migration SQL server name without ''.database.windows.net'''
  type: string
  default: ''

- name: migrationSqlDatabaseName
  displayName: 'Migration SQL database name'
  type: string
  default: ''

- name: migrationSqlFiles
  displayName: 'Migration SQL files'
  type: object
  default: []

jobs:
- deployment: Deploy
  displayName: 'Deploy'
  pool:
    vmImage: ${{ parameters.vmImage }}
  environment: ${{ parameters.environmentName }}
  dependsOn: ${{ parameters.dependsOn }}
  condition: ${{ parameters.condition }}
  strategy:
    runOnce:
      deploy:
        steps:
        - download: ${{ parameters.ciPipelineResourceName }}
          displayName: 'Download artifact ''${{ parameters.projectArtifactName }}'''
          artifact: ${{ parameters.projectArtifactName }}

        - task: AzureAppServiceSettings@1
          displayName: 'Replace App Service settings'
          condition: |
            or
            (
              ne('${{ parameters.generalSettings }}', ''),
              ne('${{ parameters.connectionStrings }}', ''),
              ne('${{ parameters.appSettings }}', '')
            )
          inputs:
            azureSubscription: ${{ parameters.azureServiceConnectionName }}
            resourceGroupName: ${{ parameters.resourceGroupName }}
            appName: ${{ parameters.appName }}
            generalSettings: ${{ parameters.generalSettings }}
            connectionStrings: ${{ parameters.connectionStrings }}
            appSettings: ${{ parameters.appSettings }}

        - task: AzureWebApp@1
          displayName: 'Deploy in App Service'
          inputs:
            azureSubscription: ${{ parameters.azureServiceConnectionName }}
            appType: 'webAppLinux'
            appName: ${{ parameters.appName }}
            package: '$(Pipeline.Workspace)/${{ parameters.ciPipelineResourceName }}/${{ parameters.projectArtifactName }}/*.zip'

- deployment: Migrations
  displayName: 'Migrations'
  pool:
    vmImage: windows-latest
  environment: ${{ parameters.environmentName }}
  dependsOn: Deploy
  condition: eq(dependencies.Deploy.result, 'Succeeded')
  strategy:
    runOnce:
      deploy:
        steps:
        - download: ${{ parameters.ciPipelineResourceName }}
          displayName: 'Download artifact ''${{ parameters.migrationArtifactName }}'''
          artifact: ${{ parameters.migrationArtifactName }}

        - ${{ each fileName in parameters.migrationSqlFiles }}:
          - task: SqlAzureDacpacDeployment@1
            displayName: 'Apply ''${{ fileName }}'' migration script'
            inputs:
              azureSubscription: ${{ parameters.azureServiceConnectionName }}
              AuthenticationType: 'servicePrincipal'
              ServerName: '${{ parameters.migrationSqlServerName }}.database.windows.net'
              DatabaseName: ${{ parameters.migrationSqlDatabaseName }}
              deployType: 'SqlTask'
              SqlFile: '$(Pipeline.Workspace)/${{ parameters.ciPipelineResourceName }}/${{ parameters.migrationArtifactName }}/${{ fileName }}'
              IpDetectionMethod: 'AutoDetect'
