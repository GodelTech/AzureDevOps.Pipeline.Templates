parameters:
- name: buildConfiguration
  displayName: 'Build configuration'
  type: string
  default: 'Release'

- name: preBuildSteps
  displayName: 'Steps to run before build'
  type: stepList
  default: []

- name: enableSonarCloud
  displayName: 'Enable SonarCloud'
  type: boolean
  default: true

- name: sonarCloudOrganizationName
  displayName: 'Organization name for SonarCloud'
  type: string
  default: ''

- name: sonarCloudProjectKey
  displayName: 'Project key for SonarCloud'
  type: string
  default: ''

- name: sonarCloudProjectName
  displayName: 'Project name for SonarCloud'
  type: string
  default: ''

- name: dotNetSDKVersions
  displayName: '.NET Core SDK versions'
  type: object
  default: []

- name: codeCoverageSettingsFullPath
  displayName: 'The path of the code coverage settings file'
  type: string
  default: '.runsettings'

- name: restoreOnlyFromNuGetFeed
  displayName: 'Restore only from NuGet feed'
  type: boolean
  default: true

- name: nugetConfigPath
  displayName: 'NuGet configuration path'
  type: string
  default: ''

- name: internalFeed
  displayName: 'Internal feed'
  type: string
  default: ''

- name: enableDotNetFormat
  displayName: 'Verify that all code is correctly formatted'
  type: boolean
  default: true

- name: continueOnErrorNuGetValidationOutdatedPackages
  displayName: 'Continue build if NuGet validation found outdated packages'
  type: boolean
  default: true

- name: mutationTestingLevel
  displayName: 'Mutation testing level'
  type: string
  default: 'Complete'

- name: mutationTestingProjects
  displayName: 'List of projects for mutation testing using Stryker'
  type: object
  default: []

- name: checkWarnings
  displayName: 'Check warnings'
  type: boolean
  default: true

- name: checkCoverage
  displayName: 'Check code coverage'
  type: boolean
  default: true

- name: includeSonarcloudBuildBreaker
  displayName: 'Does Sonarcloud build breaker turn on?'
  type: boolean
  default: true

- name: checkMutationTesting
  displayName: 'Check mutation testing'
  type: boolean
  default: true

steps:
- ${{ each step in parameters.preBuildSteps }}:
  - ${{ each pair in step }}:
      ${{ if ne(pair.value, 'script') }}:
        ${{ pair.key }}: ${{ pair.value }}
      ${{ if eq(pair.value, 'script') }}:
        ${{ pair.key }}: ${{ pair.value }}
      ${{ if eq(pair.value, 'task') }}:
        # Step is rejected by raising a YAML syntax error: Unexpected value 'task'
        '${{ pair.value }}': error

- task: SonarCloudPrepare@2
  displayName: 'Prepare analysis on SonarCloud'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.enableSonarCloud }}, true)
    )
  inputs:
    SonarCloud: 'SonarCloud'
    organization: '${{ parameters.sonarCloudOrganizationName }}'
    scannerMode: 'MSBuild'
    projectKey: '${{ parameters.sonarCloudProjectKey }}'
    projectName: '${{ parameters.sonarCloudProjectName }}'
    extraProperties: |
      sonar.coverageReportPaths="$(Build.SourcesDirectory)/TestResults/Coverage/SonarQube.xml"

- template: 'dotnet/build.yml'
  parameters:
    buildConfiguration: ${{ parameters.buildConfiguration }}
    dotNetSDKVersions: ${{ parameters.dotNetSDKVersions }}
    restoreOnlyFromNuGetFeed: ${{ parameters.restoreOnlyFromNuGetFeed }}
    nugetConfigPath: ${{ parameters.nugetConfigPath }}
    internalFeed: ${{ parameters.internalFeed }}

- task: DotNetCoreCLI@2
  displayName: 'dotnet format'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.enableDotNetFormat }}, true)
    )
  inputs:
    command: 'custom'
    custom: 'format'
    arguments: >-
      --verify-no-changes
      --no-restore

- template: 'NuGet/validation.yml'
  parameters:
    continueOnErrorNuGetValidationOutdatedPackages: ${{ parameters.continueOnErrorNuGetValidationOutdatedPackages }}

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    projects: '**/*[Tt]ests/*.csproj'
    arguments: >-
      --configuration ${{ parameters.buildConfiguration }}
      --no-build
      --no-restore
      --collect:"XPlat Code Coverage"
      --settings $(System.DefaultWorkingDirectory)/${{ parameters.codeCoverageSettingsFullPath }}
      -- RunConfiguration.DisableAppDomain=true
    publishTestResults: true

- script: 'dotnet tool install --global dotnet-reportgenerator-globaltool'
  displayName: 'Install ReportGenerator tool'

- script: reportgenerator
    "-reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml"
    "-targetdir:$(Build.SourcesDirectory)/TestResults/Coverage"
    "-reporttypes:Cobertura;SonarQube"
  displayName: 'Create reports'

- task: PublishCodeCoverageResults@2
  displayName: 'Publish code coverage reports'
  inputs:
    summaryFileLocation: '$(Build.SourcesDirectory)/TestResults/Coverage/Cobertura.xml'

- task: SonarCloudAnalyze@2
  displayName: 'Run Code Analysis'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.enableSonarCloud }}, true)
    )

- task: SonarCloudPublish@2
  displayName: 'Publish Quality Gate Result'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.enableSonarCloud }}, true)
    )
  inputs:
    pollingTimeoutSec: '300'

- template: 'Stryker/mutation-testing.yml'
  parameters:
    mutationTestingLevel: ${{ parameters.mutationTestingLevel }}
    mutationTestingProjects: ${{ parameters.mutationTestingProjects }}

- task: BuildQualityChecks@8
  displayName: 'Warnings quality check'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.checkWarnings }}, true)
    )
  inputs:
    checkWarnings: true
    warningFailOption: 'fixed'
    warningThreshold: '0'
    showStatistics: true

- task: BuildQualityChecks@8
  displayName: 'Line Code coverage quality check'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.checkCoverage }}, true)
    )
  inputs:
    checkCoverage: true
    coverageFailOption: 'fixed'
    coverageType: 'lines'
    treat0of0as100: true
    coverageThreshold: '80'

- task: BuildQualityChecks@8
  displayName: 'Branch Code coverage quality check'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.checkCoverage }}, true)
    )
  inputs:
    checkCoverage: true
    coverageFailOption: 'fixed'
    coverageType: 'branches'
    treat0of0as100: true
    coverageThreshold: '80'

- task: sonarcloud-buildbreaker@2
  displayName: 'Break build on quality gate failure'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.enableSonarCloud }}, true),
      eq(${{ parameters.includeSonarcloudBuildBreaker }}, true)
    )
  inputs:
    SonarCloud: 'SonarCloud'
    organization: '${{ parameters.sonarCloudOrganizationName }}'

- template: 'Stryker/validation.yml'
  parameters:
    checkMutationTesting: ${{ parameters.checkMutationTesting }}
