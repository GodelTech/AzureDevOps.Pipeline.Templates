parameters:
- name: buildConfiguration
  displayName: 'Build configuration'
  type: string
  default: 'Release'

- name: preBuildSteps
  displayName: 'Steps to run before build'
  type: stepList
  default: []

- name: enableSonarCloud
  displayName: 'Enable SonarCloud'
  type: boolean
  default: true

- name: sonarCloudOrganizationName
  displayName: 'Organization name for SonarCloud'
  type: string
  default: ''

- name: sonarCloudProjectKey
  displayName: 'Project key for SonarCloud'
  type: string
  default: ''

- name: sonarCloudProjectName
  displayName: 'Project name for SonarCloud'
  type: string
  default: ''

- name: dotNetSDKVersions
  displayName: '.NET Core SDK versions'
  type: object
  default: []

- name: codeCoverageSettingsFullPath
  displayName: 'The path of the code coverage settings file'
  type: string
  default: '.runsettings'

- name: restoreOnlyFromNuGetFeed
  displayName: 'Restore only from NuGet feed'
  type: boolean
  default: true

- name: nugetConfigPath
  displayName: 'NuGet configuration path'
  type: string
  default: ''

- name: internalFeed
  displayName: 'Internal feed'
  type: string
  default: ''

- name: enableDotNetFormat
  displayName: 'Verify that all code is correctly formatted'
  type: boolean
  default: true

- name: mutationTestingProjects
  displayName: 'List of projects for mutation testing using Stryker'
  type: object
  default: []

- name: enableReSharperInspectCode
  displayName: 'Enable ReSharper inspect code'
  type: boolean
  default: true

- name: checkWarnings
  displayName: 'Check warnings'
  type: boolean
  default: true

- name: checkCoverage
  displayName: 'Check code coverage'
  type: boolean
  default: true

- name: includeSonarcloudBuildBreaker
  displayName: 'Does Sonarcloud build breaker turn on?'
  type: boolean
  default: true

steps:
- ${{ each step in parameters.preBuildSteps }}:
  - ${{ each pair in step }}:
      ${{ if ne(pair.value, 'CmdLine@2') }}:
        ${{ pair.key }}: ${{ pair.value }}       
      ${{ if eq(pair.value, 'CmdLine@2') }}: 
        # Step is rejected by raising a YAML syntax error: Unexpected value 'CmdLine@2'
        '${{ pair.value }}': error

- task: SonarCloudPrepare@1
  displayName: 'Prepare analysis on SonarCloud'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.enableSonarCloud }}, true)
    )
  inputs:
    SonarCloud: 'SonarCloud'
    organization: '${{ parameters.sonarCloudOrganizationName }}'
    scannerMode: 'MSBuild'
    projectKey: '${{ parameters.sonarCloudProjectKey }}'
    projectName: '${{ parameters.sonarCloudProjectName }}'
    extraProperties: |
      sonar.coverageReportPaths="$(Build.SourcesDirectory)/TestResults/Coverage/SonarQube.xml"

- ${{ if eq(length(parameters.dotNetSDKVersions), 0) }}:
  - task: UseDotNet@2
    displayName: 'Use .NET Core SDK 6.0.x'
    inputs:
      packageType: sdk
      version: '6.0.x'

- ${{ each dotNetSDKVersion in parameters.dotNetSDKVersions }}:
  - task: UseDotNet@2
    displayName: 'Use .NET Core SDK ${{ dotNetSDKVersion }}'
    inputs:
      packageType: sdk
      version: ${{ dotNetSDKVersion }}

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore only from NuGet feed'
  condition: |
    or
    (
      and
      (
        succeeded(),
        eq(${{ parameters.restoreOnlyFromNuGetFeed }}, true)
      ),
      and
      (
        succeeded(),
        eq(${{ parameters.restoreOnlyFromNuGetFeed }}, false),
        eq('${{ parameters.nugetConfigPath }}', ''),
        eq('${{ parameters.internalFeed }}', '')
      )
    )
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore with NuGet config'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.restoreOnlyFromNuGetFeed }}, false),
      ne('${{ parameters.nugetConfigPath }}', ''),
      eq('${{ parameters.internalFeed }}', '')
    )
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'config'
    nugetConfigPath: '${{ parameters.nugetConfigPath }}'

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore from both NuGet and Azure Artifacts feeds'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.restoreOnlyFromNuGetFeed }}, false),
      eq('${{ parameters.nugetConfigPath }}', ''),
      ne('${{ parameters.internalFeed }}', '')
    )
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    vstsFeed: '${{ parameters.internalFeed }}'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: --configuration ${{ parameters.buildConfiguration }}
      --no-restore

- task: DotNetCoreCLI@2
  displayName: 'dotnet format'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.enableDotNetFormat }}, true)
    )
  inputs:
    command: 'custom'
    custom: 'format'
    arguments: --verify-no-changes
      --no-restore

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    projects: '**/*[Tt]ests/*.csproj'
    arguments: --configuration ${{ parameters.buildConfiguration }}
      --no-restore
      --collect:"XPlat Code Coverage"
      --settings $(System.DefaultWorkingDirectory)/${{ parameters.codeCoverageSettingsFullPath }}
      -- RunConfiguration.DisableAppDomain=true
    publishTestResults: true

- script: 'dotnet tool install --global dotnet-reportgenerator-globaltool'
  displayName: 'Install ReportGenerator tool'

- script: reportgenerator
    "-reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml"
    "-targetdir:$(Build.SourcesDirectory)/TestResults/Coverage"
    "-reporttypes:Cobertura;SonarQube"
  displayName: 'Create reports'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage reports'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/TestResults/Coverage/Cobertura.xml'

- task: SonarCloudAnalyze@1
  displayName: 'Run Code Analysis'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.enableSonarCloud }}, true)
    )

- task: SonarCloudPublish@1
  displayName: 'Publish Quality Gate Result'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.enableSonarCloud }}, true)
    )
  inputs:
    pollingTimeoutSec: '300'

- script: 'dotnet tool install --global dotnet-stryker'
  displayName: 'Install Stryker tool'
  condition: |
    and
    (
      succeeded(),
      ${{ gt(length(parameters.mutationTestingProjects), 0) }}
    )

- ${{ each mutationTestingProject in parameters.mutationTestingProjects }}:
  - task: PowerShell@2
    displayName: 'Mutation Testing for project ${{ mutationTestingProject.displayName }}'
    inputs:
      targetType: 'inline'
      script: 'dotnet stryker'
      workingDirectory: '$(Build.SourcesDirectory)${{ mutationTestingProject.folderPath }}'

  - task: PublishMutationReport@0
    displayName: 'Publish Mutation Testing Report for project ${{ mutationTestingProject.displayName }}'
    inputs:
      reportDisplayName: '${{ mutationTestingProject.displayName }} Mutation Testing Report'
      reportPattern: '$(Build.SourcesDirectory)${{ mutationTestingProject.folderPath }}/StrykerOutput/**/mutation-report.html'

- task: PowerShell@2
  displayName: 'Set solution name from repository name'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.enableReSharperInspectCode }}, true)
    )
  inputs:
    targetType: 'inline'
    script: |
      $solutionNameArray = "$(Build.Repository.Name)".Split("/")
      $solutionName = $solutionNameArray[0]

      if ($solutionNameArray.Length -gt 1) {
        $solutionName = $solutionNameArray[1]
      }

      Write-Host "##vso[task.setvariable variable=solutionName;]$solutionName"

- script: 'dotnet tool install --global JetBrains.ReSharper.GlobalTools'
  displayName: 'Install ReSharper tool'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.enableReSharperInspectCode }}, true)
    )

- script: jb inspectcode '$(Build.SourcesDirectory)/$(solutionName).sln'
    "--output=$(Build.SourcesDirectory)/TestResults/ReSharper/ReSharper.xml"
    "--properties:Configuration=${{ parameters.buildConfiguration }}"
    "--no-build"
  displayName: 'ReSharper inspect code'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.enableReSharperInspectCode }}, true)
    )

- task: PublishPipelineArtifact@1
  displayName: 'Publish ReSharper inspect code report'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.enableReSharperInspectCode }}, true)
    )
  inputs:
    targetPath: '$(Build.SourcesDirectory)/TestResults/ReSharper'
    artifactName: 'ReSharperInspectCodeReport'

- task: BuildQualityChecks@8
  displayName: 'Warnings quality check'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.checkWarnings }}, true)
    )
  inputs:
    checkWarnings: true
    warningFailOption: 'fixed'
    warningThreshold: '0'
    showStatistics: true

- task: BuildQualityChecks@8
  displayName: 'Line Code coverage quality check'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.checkCoverage }}, true)
    )
  inputs:
    checkCoverage: true
    coverageFailOption: 'fixed'
    coverageType: 'lines'
    treat0of0as100: true
    coverageThreshold: '80'

- task: BuildQualityChecks@8
  displayName: 'Branches Code coverage quality check'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.checkCoverage }}, true)
    )
  inputs:
    checkCoverage: true
    coverageFailOption: 'fixed'
    coverageType: 'branches'
    treat0of0as100: true
    coverageThreshold: '80'

- task: sonarcloud-buildbreaker@2
  displayName: 'Break build on quality gate failure'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.enableSonarCloud }}, true),
      eq(${{ parameters.includeSonarcloudBuildBreaker }}, true)
    )
  inputs:
    SonarCloud: 'SonarCloud'
    organization: '${{ parameters.sonarCloudOrganizationName }}'