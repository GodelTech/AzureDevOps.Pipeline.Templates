parameters:
- name: vmImage
  displayName: 'Pool VM image'
  type: string
  default: 'ubuntu-latest'

- name: buildConfiguration
  displayName: 'Build configuration'
  type: string
  default: 'Release'

- name: preBuildSteps
  displayName: 'Steps to run before build'
  type: stepList
  default: []

- name: enableSonarCloud
  displayName: 'Enable SonarCloud'
  type: boolean
  default: true

- name: sonarCloudOrganizationName
  displayName: 'Organization name for SonarCloud'
  type: string
  default: ''

- name: dotNetSDKVersions
  displayName: '.NET Core SDK versions'
  type: object
  default: []

- name: defaultBranch
  displayName: 'Name of the main branch'
  type: string
  default: 'main'

- name: artifactPackDirectory
  displayName: 'Pipeline Artifact publishing directory'
  type: string
  default: ''

- name: codeCoverageSettingsFullPath
  displayName: 'The path of the code coverage settings file'
  type: string
  default: '.runsettings'

- name: internalFeed
  displayName: 'Internal dotnet artifact feed'
  type: string
  default: ''

- name: enableDotNetFormat
  displayName: 'Verify that all code is correctly formatted'
  type: boolean
  default: true

- name: mutationTestingProjects
  displayName: 'List of projects for mutation testing using Stryker'
  type: object
  default: []

- name: enableReSharperInspectCode
  displayName: 'Enable ReSharper inspect code'
  type: boolean
  default: true

- name: checkWarnings
  displayName: 'Check warnings'
  type: boolean
  default: true

- name: checkCoverage
  displayName: 'Check code coverage'
  type: boolean
  default: true

- name: includeSonarcloudBuildBreaker
  displayName: 'Does Sonarcloud build breaker turn on?'
  type: boolean
  default: true

variables:
  ${{ if eq(variables['Build.SourceBranchName'], parameters.defaultBranch) }}:
    isDefaultBranch: true
  ${{ if ne(variables['Build.SourceBranchName'], parameters.defaultBranch) }}:
    isDefaultBranch: false

stages:
- stage: Build
  displayName: 'Build'
  pool:
    vmImage: ${{ parameters.vmImage }}
  jobs:
  - job: Build
    displayName: 'Build'
    variables:
      ${{ if or(eq(variables.isDefaultBranch, true), eq(variables['Build.Reason'], 'PullRequest')) }}:
        restoreOnlyFromNuGetFeed: true
      ${{ if and(eq(variables.isDefaultBranch, false), ne(variables['Build.Reason'], 'PullRequest')) }}:
        restoreOnlyFromNuGetFeed: false
    steps:
    - template: 'build.yml'
      parameters:
        buildConfiguration: ${{ parameters.buildConfiguration }}
        preBuildSteps: ${{ parameters.preBuildSteps }}
        enableSonarCloud: ${{ parameters.enableSonarCloud }}
        sonarCloudOrganizationName: ${{ parameters.sonarCloudOrganizationName }}
        sonarCloudProjectKey: ${{ replace(variables['Build.Repository.Name'], '/', '_') }}
        sonarCloudProjectName: ${{ replace(variables['Build.Repository.Name'], '/', '_') }}
        dotNetSDKVersions: ${{ parameters.dotNetSDKVersions }}
        codeCoverageSettingsFullPath: ${{ parameters.codeCoverageSettingsFullPath }}
        ${{ if eq(variables.restoreOnlyFromNuGetFeed, true) }}:
          restoreOnlyFromNuGetFeed: true
        ${{ if eq(variables.restoreOnlyFromNuGetFeed, false) }}:
          restoreOnlyFromNuGetFeed: false
        internalFeed: ${{ parameters.internalFeed }}
        enableDotNetFormat: ${{ parameters.enableDotNetFormat }}
        mutationTestingProjects: ${{ parameters.mutationTestingProjects }}
        enableReSharperInspectCode: ${{ parameters.enableReSharperInspectCode }}
        checkWarnings: ${{ parameters.checkWarnings }}
        checkCoverage: ${{ parameters.checkCoverage }}
        includeSonarcloudBuildBreaker: ${{ parameters.includeSonarcloudBuildBreaker }}

  - job: Pack
    displayName: 'Pack'
    dependsOn: Build
    condition: eq(dependencies.Build.result, 'Succeeded')
    variables:
      shouldCreateNewTag: false
    steps:
    - template: '../git-versioning.yml'
      parameters:
        ${{ if eq(variables.isDefaultBranch, true) }}:
          isDefaultBranch: true
        ${{ if eq(variables.isDefaultBranch, false) }}:
          isDefaultBranch: false

    - task: DotNetCoreCLI@2
      displayName: 'Pack .NET Core NuGet packages'
      inputs:
        command: 'pack'
        packagesToPack: '**/*.csproj'
        packDirectory: '$(Build.ArtifactStagingDirectory)/${{ parameters.artifactPackDirectory }}'
        versioningScheme: byEnvVar
        versionEnvVar: 'Build.BuildNumber'

    - task: PowerShell@2
      condition: eq(variables.isDefaultBranch, true)
      displayName: 'Compare last tag with build number'
      inputs:
        targetType: "inline"
        script:
          $lastTag = $(git describe --tags --abbrev=0);
          $shouldCreateNewTag = $($lastTag -ne $Build.BuildNumber);
          Write-Host "##vso[task.setvariable variable=shouldCreateNewTag]$shouldCreateNewTag";

    - task: git-tag-on-release-task@9
      condition: |
        and
        (
          eq(variables.isDefaultBranch, true),
          eq(variables.shouldCreateNewTag, true)
        )
      displayName: 'Add new tag to git'
      inputs:
        staticTagName: '$(Build.BuildNumber)'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact: NuGet Packages'
      inputs:
        path: '$(Build.ArtifactStagingDirectory)/${{ parameters.artifactPackDirectory }}'
        artifact: 'NuGet Packages'

- stage: Artifacts
  displayName: 'Push package in internal feed'
  dependsOn: Build
  condition: succeeded()
  pool:
    vmImage: ${{ parameters.vmImage }}
  jobs:
  - deployment: Publish
    displayName: 'Publish packages in Artifacts'
    environment: 'Artifacts'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: 'Push package in Artifacts'
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
              nuGetFeedType: 'internal'
              publishVstsFeed: '${{ parameters.internalFeed }}'

- stage: NuGet
  displayName: 'Push package in external NuGet feed'
  dependsOn: Artifacts
  condition: |
    and
    (
      succeeded(),
      eq(variables.isDefaultBranch, true)
    )
  pool:
    vmImage: ${{ parameters.vmImage }}
  jobs:
  - deployment: Publish
    displayName: 'Publish packages'
    environment: 'NuGet'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: 'NuGet push'
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'NuGet'
