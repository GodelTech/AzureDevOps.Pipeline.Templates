parameters:
- name: vmImage
  displayName: 'Pool VM image'
  type: string
  default: 'ubuntu-latest'

- name: buildConfiguration
  displayName: 'Build configuration'
  type: string
  default: 'Release'

- name: preBuildSteps
  displayName: 'Steps to run before build'
  type: stepList
  default: []

- name: enableSonarCloud
  displayName: 'Enable SonarCloud'
  type: boolean
  default: true

- name: sonarCloudOrganizationName
  displayName: 'Organization name for SonarCloud'
  type: string
  default: ''

- name: sonarCloudProjectKey
  displayName: 'Project key for SonarCloud'
  type: string
  default: ''

- name: sonarCloudProjectName
  displayName: 'Project name for SonarCloud'
  type: string
  default: ''

- name: dotNetSDKVersions
  displayName: '.NET Core SDK versions'
  type: object
  default: []

- name: defaultBranch
  displayName: 'Name of the main branch'
  type: string
  default: 'refs/heads/main'

- name: codeCoverageSettingsFullPath
  displayName: 'The path of the code coverage settings file'
  type: string
  default: '.runsettings'

- name: nugetConfigPath
  displayName: 'NuGet configuration path'
  type: string
  default: ''

- name: internalFeed
  displayName: 'Internal dotnet artifact feed'
  type: string
  default: ''

- name: enableDotNetFormat
  displayName: 'Verify that all code is correctly formatted'
  type: boolean
  default: true

- name: continueOnErrorNuGetValidationOutdatedPackages
  displayName: 'Continue build if NuGet validation found outdated packages'
  type: boolean
  default: true

- name: mutationTestingLevel
  displayName: 'Mutation testing level'
  type: string
  default: 'Complete'

- name: mutationTestingProjects
  displayName: 'List of projects for mutation testing using Stryker'
  type: object
  default: []

- name: checkWarnings
  displayName: 'Check warnings'
  type: boolean
  default: true

- name: checkCoverage
  displayName: 'Check code coverage'
  type: boolean
  default: true

- name: includeSonarcloudBuildBreaker
  displayName: 'Does Sonarcloud build breaker turn on?'
  type: boolean
  default: true

- name: checkMutationTesting
  displayName: 'Check mutation testing'
  type: boolean
  default: true

- name: packageArtifactName
  displayName: 'Package artifact name'
  type: string
  default: 'package'

variables:
  ${{ if eq(variables['Build.SourceBranch'], parameters.defaultBranch) }}:
    isDefaultBranch: true
  ${{ else }}:
    isDefaultBranch: false

stages:
- stage: Build
  displayName: 'Build'

  jobs:
  - template: '../Git/version/get-version.yml'

  - job: Build
    displayName: 'Build'
    pool:
      vmImage: ${{ parameters.vmImage }}
    variables:
      ${{ if or(eq(variables.isDefaultBranch, true), eq(variables['Build.Reason'], 'PullRequest')) }}:
        restoreOnlyFromNuGetFeed: true
      ${{ else }}:
        restoreOnlyFromNuGetFeed: false
    steps:
    - template: 'build.yml'
      parameters:
        buildConfiguration: ${{ parameters.buildConfiguration }}
        preBuildSteps: ${{ parameters.preBuildSteps }}
        enableSonarCloud: ${{ parameters.enableSonarCloud }}
        sonarCloudOrganizationName: ${{ parameters.sonarCloudOrganizationName }}
        sonarCloudProjectKey: ${{ parameters.sonarCloudProjectKey }}
        sonarCloudProjectName: ${{ parameters.sonarCloudProjectName }}
        dotNetSDKVersions: ${{ parameters.dotNetSDKVersions }}
        codeCoverageSettingsFullPath: ${{ parameters.codeCoverageSettingsFullPath }}
        restoreOnlyFromNuGetFeed: ${{ variables.restoreOnlyFromNuGetFeed }}
        nugetConfigPath: ${{ parameters.nugetConfigPath }}
        internalFeed: ${{ parameters.internalFeed }}
        enableDotNetFormat: ${{ parameters.enableDotNetFormat }}
        continueOnErrorNuGetValidationOutdatedPackages: ${{ parameters.continueOnErrorNuGetValidationOutdatedPackages }}
        mutationTestingLevel: ${{ parameters.mutationTestingLevel }}
        mutationTestingProjects: ${{ parameters.mutationTestingProjects }}
        checkWarnings: ${{ parameters.checkWarnings }}
        checkCoverage: ${{ parameters.checkCoverage }}
        includeSonarcloudBuildBreaker: ${{ parameters.includeSonarcloudBuildBreaker }}
        checkMutationTesting: ${{ parameters.checkMutationTesting }}

  - job: Pack
    displayName: 'Pack'
    pool:
      vmImage: ${{ parameters.vmImage }}
    dependsOn:
    - GitVersion
    - Build
    condition: |
      and
      (
        eq(dependencies.GitVersion.result, 'Succeeded'),
        in(dependencies.Build.result, 'Succeeded', 'SucceededWithIssues')
      )
    variables:
      ${{ if or(eq(variables.isDefaultBranch, true), eq(variables['Build.Reason'], 'PullRequest')) }}:
        restoreOnlyFromNuGetFeed: true
      ${{ else }}:
        restoreOnlyFromNuGetFeed: false
      gitVersion: $[ dependencies.GitVersion.outputs['GitVersion.GitVersion.SemVer'] ]
    steps:
    - template: 'dotnet/restore.yml'
      parameters:
        restoreOnlyFromNuGetFeed: ${{ variables.restoreOnlyFromNuGetFeed }}
        nugetConfigPath: ${{ parameters.nugetConfigPath }}
        internalFeed: ${{ parameters.internalFeed }}

    - task: DotNetCoreCLI@2
      displayName: 'Pack NuGet package'
      inputs:
        command: 'pack'
        packagesToPack: '**/*.csproj'
        packDirectory: '$(Build.ArtifactStagingDirectory)/${{ replace(variables[''Build.Repository.Name''], ''/'', ''_'') }}_$(Build.BuildNumber)'
        versioningScheme: byEnvVar
        versionEnvVar: 'gitVersion'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish package in artifacts'
      inputs:
        path: '$(Build.ArtifactStagingDirectory)/${{ replace(variables[''Build.Repository.Name''], ''/'', ''_'') }}_$(Build.BuildNumber)'
        artifact: ${{ parameters.packageArtifactName }}

  - template: '../Git/version/add-version-tag.yml'
    parameters:
      dependsOn:
      - GitVersion
      - Pack
      condition: |
        and
        (
          eq(variables.isDefaultBranch, true),
          eq(dependencies.GitVersion.result, 'Succeeded'),
          in(dependencies.Pack.result, 'Succeeded', 'SucceededWithIssues'),
          ne(dependencies.GitVersion.outputs['GitVersion.GitVersion.SemVer'], '')
        )
      variables:
      - name: gitVersion
        value: $[ dependencies.GitVersion.outputs['GitVersion.GitVersion.SemVer'] ]

- stage: Artifacts
  displayName: 'Push package in internal feed'
  dependsOn: Build
  condition: in(dependencies.Build.result, 'Succeeded', 'SucceededWithIssues')
  pool:
    vmImage: ${{ parameters.vmImage }}
  jobs:
  - deployment: Push
    displayName: 'Push package in artifacts'
    environment: 'Artifacts'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: 'Download artifact ''${{ parameters.packageArtifactName }}'''
            artifact: ${{ parameters.packageArtifactName }}

          - task: NuGetCommand@2
            displayName: 'Push package in artifacts'
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/${{ parameters.packageArtifactName }}/*.nupkg;!$(Pipeline.Workspace)/${{ parameters.packageArtifactName }}/*.symbols.nupkg'
              nuGetFeedType: 'internal'
              publishVstsFeed: '${{ parameters.internalFeed }}'

- stage: NuGet
  displayName: 'Push package in external NuGet feed'
  dependsOn:
  - Build
  - Artifacts
  condition: |
    and
    (
      eq(variables.isDefaultBranch, true),
      in(dependencies.Build.result, 'Succeeded', 'SucceededWithIssues'),
      eq(dependencies.Artifacts.result, 'Succeeded')
    )
  pool:
    vmImage: ${{ parameters.vmImage }}
  jobs:
  - deployment: Push
    displayName: 'Push package in NuGet'
    environment: 'NuGet'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: 'Download artifact ''${{ parameters.packageArtifactName }}'''
            artifact: ${{ parameters.packageArtifactName }}

          - task: NuGetCommand@2
            displayName: 'Push package in NuGet'
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/${{ parameters.packageArtifactName }}/*.nupkg;!$(Pipeline.Workspace)/${{ parameters.packageArtifactName }}/*.symbols.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'NuGet'
