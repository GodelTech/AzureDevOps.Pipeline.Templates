parameters:
  - name: vmImage
    displayName: 'vmImage'
    type: string
    default: 'ubuntu-latest'

  - name: sonarCloudOrganizationName
    displayName: 'Organization name for SonarCloud'
    type: string
    default: 'N/A'

  - name: defaultBranch
    displayName: 'Name of the main branch'
    type: string
    default: 'master'

  - name: buildConfiguration
    displayName: 'Build Configuration'
    type: string
    default: 'N/A'

  - name: artifactPackDirectory
    displayName: 'Pipeline Artifact publishing directory'
    type: string
    default: 'N/A'

  - name: internalFeed
    displayName: 'Internal dotnet artifact feed'
    type: string
    default: 'N/A'

  - name: codeCoverageSettingsFileName
    displayName: 'The Name of the code coverage settings file'
    type: string
    default: 'CodeCoverage.runsettings'

  - name: includeSonarcloudBuildBreaker
    displayName: 'Does Sonarcloud build breaker turn on?'
    type: boolean
    default: true

variables:
  isDefaultBranch: $[eq(variables['Build.SourceBranch'], 'refs/heads/${{ parameters.defaultBranch }}')]

stages:
  - stage: Build
    displayName: 'Build'
    pool:
      vmImage: ${{ parameters.vmImage }}
    jobs:
      - job: Build
        displayName: 'Build'
        variables:
          isPullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]
        steps:
          - task: SonarCloudPrepare@1
            displayName: 'Prepare analysis on SonarCloud'
            inputs:
              SonarCloud: 'SonarCloud'
              organization: '${{ parameters.sonarCloudOrganizationName }}'
              scannerMode: 'MSBuild'
              projectKey: '$(Build.DefinitionName)'
              projectName: '$(Build.DefinitionName)'
              extraProperties: |
                sonar.cs.opencover.reportsPaths="$(Agent.TempDirectory)/**/coverage.opencover.xml"
                sonar.coverage.exclusions="tools/build/*"

          - template: 'build.yml'
            parameters:
              buildConfiguration: ${{ parameters.buildConfiguration }}
              codeCoverageSettingsFullPath: ${{ parameters.codeCoverageSettingsFileName }}
              internalFeed: ${{ parameters.internalFeed }}
              restoreOnlyFromNuGetFeed: false

          # Temp solution because of issue with SonarCloud
          - task: UseDotNet@2
            displayName: 'Use .NET Core SDK 2.2.x for SonarCloud'
            inputs:
              packageType: 'sdk'
              version: '2.2.x'

          - task: SonarCloudAnalyze@1
            displayName: 'Run Code Analysis'

          - task: SonarCloudPublish@1
            displayName: 'Publish Quality Gate Result'
            inputs:
              pollingTimeoutSec: '300'

          - task: sonarcloud-buildbreaker@2
            displayName: 'Break build on quality gate failure'
            condition: eq(${{ parameters.includeSonarcloudBuildBreaker }}, true)
            inputs:
              SonarCloud: 'SonarCloud'
              organization: '${{ parameters.sonarCloudOrganizationName }}'

      - job: Pack
        displayName: 'Pack'
        dependsOn: Build
        variables:
          shouldCreateNewTag: false
        steps:
          - template: 'git-versioning.yml'
            parameters:
              isDefaultBranch: variables.isDefaultBranch

          - task: DotNetCoreCLI@2
            displayName: 'Pack .NET Core NuGet packages'
            inputs:
              command: 'pack'
              packagesToPack: '**/*.csproj'
              packDirectory: '$(Build.ArtifactStagingDirectory)/${{ parameters.artifactPackDirectory }}'
              versioningScheme: byEnvVar
              versionEnvVar: 'Build.BuildNumber'

          - task: PowerShell@2
            condition: eq(variables.isDefaultBranch, true)
            displayName: 'Compare last tag with build number'
            inputs:
              targetType: "inline"
              script:
                $lastTag = $(git describe --tags --abbrev=0);
                $shouldCreateNewTag = $($lastTag -ne $Build.BuildNumber);
                Write-Host "##vso[task.setvariable variable=shouldCreateNewTag]$shouldCreateNewTag";

          - task: git-tag-on-release-task@9
            condition: and(eq(variables.isDefaultBranch, true), eq(variables.shouldCreateNewTag, true))
            displayName: 'Add new tag to git'
            inputs:
              staticTagName: '$(Build.BuildNumber)'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Pipeline Artifact: NuGet Packages'
            inputs:
              path: '$(Build.ArtifactStagingDirectory)/${{ parameters.artifactPackDirectory }}'
              artifact: 'NuGet Packages'

  - stage: Artifacts
    displayName: 'Push package in internal feed'
    dependsOn: Build
    pool:
      vmImage: ${{ parameters.vmImage }}
    jobs:
      - deployment: Publish
        displayName: 'Publish packages in Artifacts'
        environment: 'Artifacts'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: NuGetCommand@2
                  displayName: 'Push package in Artifacts'
                  inputs:
                    command: 'push'
                    packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
                    nuGetFeedType: 'internal'
                    publishVstsFeed: '${{ parameters.internalFeed }}'

  - stage: NuGet
    displayName: 'Push package in external NuGet feed'
    dependsOn: Artifacts
    condition: eq(variables.isDefaultBranch, true)
    pool:
      vmImage: ${{ parameters.vmImage }}
    jobs:
      - deployment: Publish
        displayName: 'Publish packages'
        environment: 'NuGet'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: NuGetCommand@2
                  displayName: 'NuGet push'
                  inputs:
                    command: 'push'
                    packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
                    nuGetFeedType: 'external'
                    publishFeedCredentials: 'NuGet'
