parameters:
- name: buildConfiguration
  displayName: 'Build configuration'
  type: string
  default: 'Release'

- name: preBuildSteps
  displayName: 'Steps to run before build'
  type: stepList
  default: []

- name: codeCoverageSettingsFullPath
  displayName: 'The path of the code coverage settings file'
  type: string
  default: 'CodeCoverage.runsettings'

- name: restoreOnlyFromNuGetFeed
  displayName: 'Restore only from NuGet feed'
  type: boolean
  default: true

- name: nugetConfigPath
  displayName: 'NuGet configuration path'
  type: string
  default: ''

- name: internalFeed
  displayName: 'Internal feed'
  type: string
  default: ''

- name: checkWarnings
  displayName: 'Check warnings'
  type: boolean
  default: true

- name: checkCoverage
  displayName: 'Check code coverage'
  type: boolean
  default: true

steps:
- ${{ each step in parameters.preBuildSteps }}:
  - ${{ each pair in step }}:
      ${{ if ne(pair.value, 'CmdLine@2') }}:
        ${{ pair.key }}: ${{ pair.value }}       
      ${{ if eq(pair.value, 'CmdLine@2') }}: 
        # Step is rejected by raising a YAML syntax error: Unexpected value 'CmdLine@2'
        '${{ pair.value }}': error

- task: UseDotNet@2
  displayName: 'Use .NET Core SDK'
  inputs:
    packageType: 'sdk'
    version: '5.0.x'

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore only from NuGet feed'
  condition: |
    or
    (
      eq(${{ parameters.restoreOnlyFromNuGetFeed }}, true),
      and
      (
        eq(${{ parameters.restoreOnlyFromNuGetFeed }}, false),
        eq('${{ parameters.nugetConfigPath }}', ''),
        eq('${{ parameters.internalFeed }}', '')
      )
    )
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore with NuGet config'
  condition: |
    and
    (
      eq(${{ parameters.restoreOnlyFromNuGetFeed }}, false),
      ne('${{ parameters.nugetConfigPath }}', ''),
      eq('${{ parameters.internalFeed }}', '')
    )
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'config'
    nugetConfigPath: '${{ parameters.nugetConfigPath }}'

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore from both NuGet and Azure Artifacts feeds'
  condition: |
    and
    (
      eq(${{ parameters.restoreOnlyFromNuGetFeed }}, false),
      eq('${{ parameters.nugetConfigPath }}', ''),
      ne('${{ parameters.internalFeed }}', '')
    )
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    vstsFeed: '${{ parameters.internalFeed }}'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration ${{ parameters.buildConfiguration }}'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: 'test'
    projects: '**/*[Tt]ests/*.csproj'
    arguments: --configuration ${{ parameters.buildConfiguration }}
      --collect:"XPlat Code Coverage"
      --settings $(System.DefaultWorkingDirectory)/${{ parameters.codeCoverageSettingsFullPath }}
      -- RunConfiguration.DisableAppDomain=true
    publishTestResults: true

- script: 'dotnet tool install --global dotnet-reportgenerator-globaltool'
  displayName: 'Install ReportGenerator tool'

- script: reportgenerator
    -reports:$(Agent.TempDirectory)/*/coverage.cobertura.xml
    -targetdir:$(Build.SourcesDirectory)/TestResults/Coverage
    -reporttypes:"Cobertura"
  displayName: 'Create reports'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage reports'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/TestResults/Coverage/coverage*.cobertura.xml'

- task: BuildQualityChecks@8
  displayName: 'Warnings quality check'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.checkWarnings }}, true)
    )
  inputs:
    checkWarnings: true
    warningFailOption: 'fixed'
    warningThreshold: '0'
    showStatistics: true

- task: BuildQualityChecks@8
  displayName: 'Line Code coverage quality check'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.checkCoverage }}, true)
    )
  inputs:
    checkCoverage: true
    coverageFailOption: 'fixed'
    coverageType: 'lines'
    treat0of0as100: true
    coverageThreshold: '80'

- task: BuildQualityChecks@8
  displayName: 'Branches Code coverage quality check'
  condition: |
    and
    (
      succeeded(),
      eq(${{ parameters.checkCoverage }}, true)
    )
  inputs:
    checkCoverage: true
    coverageFailOption: 'fixed'
    coverageType: 'branches'
    treat0of0as100: true
    coverageThreshold: '80'
