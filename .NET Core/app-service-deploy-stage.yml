parameters:
  vmImage: 'ubuntu-latest'
  stageName: 'N/A'
  stageDisplayName: 'Deploy stage'
  environment: 'N/A'
  stageDependsOn: 'N/A'
  appName: 'N/A'
  azureSubscription: 'N/A'
  resourceGroupName: 'N/A'
  appSettings: ''
  generalSettings: ''
  connectionStrings: ''
  connectionStringForMigration: 'N/A'
  projectArtifactName: 'package'
  migrationArtifactName: 'migrations'

stages:
- stage: ${{ parameters.stageName }}
  displayName: '${{ parameters.stageDisplayName }}'
  dependsOn: ${{ parameters.stageDependsOn }}
  jobs:
  - deployment: Deploy
    displayName: 'Deploy job'
    pool:
      vmImage: ${{ parameters.vmImage }}
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
  #         steps:
  #         - task: AzureAppServiceSettings@1
  #           displayName: 'Replace config values'
  #           condition: or(ne('${{ parameters.appSettings }}', ''), ne('${{ parameters.generalSettings }}', ''), ne('${{ parameters.connectionStrings }}', ''))
  #           inputs:
  #             azureSubscription: ${{ parameters.azureSubscription }}
  #             appName: ${{ parameters.appName }}
  #             resourceGroupName: ${{ parameters.resourceGroupName }}
  #             appSettings: ${{ parameters.appSettings }}
  #             generalSettings: ${{ parameters.generalSettings }}
  #             connectionStrings: ${{ parameters.connectionStrings }}

  #         - task: AzureRmWebAppDeployment@4
  #           displayName: 'Deploy in App Services'
  #           inputs:
  #             ConnectionType: 'AzureRM'
  #             azureSubscription: ${{ parameters.azureSubscription }}
  #             appType: 'apiApp'
  #             WebAppName: ${{ parameters.appName }}
  #             packageForLinux: '$(Pipeline.Workspace)/${{ parameters.projectArtifactName }}/*.zip'
            steps:
            - task: PowerShell@2
              displayName: "Create a list"
              inputs:
                targetType: 'inline'
                script: |
                    $FileNames = '"test1","test2","test3","test4"'
                        Write-Host "##vso[task.setvariable variable=LoopFileName;isOutput=true]$FileNames"

                    $innerArray = ''
                    Get-ChildItem $(Pipeline.Workspace)/${{ parameters.migrationArtifactName }} |
                    ForEach-Object{
                    Write-Host $_.Name
                    $innerArray += $_.Name
                    }
                    Write-Host !!!!: $innerArray
                    Write-Host "##vso[task.setvariable variable=LoopFileName;isOutput=true]$innerArray"
              name: fileoutput

  - deployment: ApplyMigration
    displayName: 'Sql migration job'
    dependsOn:
    - Deploy
    pool:
      vmImage: windows-latest
    environment:
      name: ${{ parameters.environment }}
    variables: 
      allFileNames: $[dependencies.Deploy.outputs['fileoutput.LoopFileName']]
    strategy:
      runOnce:
        deploy:
          steps:
          - template: 'test.yml'
            parameters:
              allFileNames: $(allFileNames)
          # - powershell: |
          #     $innerArray = ''
          #     Get-ChildItem $(Pipeline.Workspace)/${{ parameters.migrationArtifactName }} |
          #     ForEach-Object{
          #     Write-Host $_.Name
          #     $innerArray += $_.Name
          #     }
          #     Write-Host "##vso[task.setvariable variable=outerArray]$innerArray"

          # - script: echo "##vso[task.setvariable variable=myArtifacts]Get-ChildItem $(Pipeline.Workspace)/${{ parameters.migrationArtifactName }}"
          # - script: echo "1111111111"
          # - ${{ each myArtifact in allFileNames }}:
          #   - script: echo ${{ myArtifact }}
            # - task: SqlAzureDacpacDeployment@1
            #   displayName: 'Apply migration script'
            #   inputs:
            #     azureSubscription: ${{ parameters.azureSubscription }}
            #     AuthenticationType: 'connectionString'
            #     ConnectionString: ${{ parameters.connectionStringForMigration }}
            #     deployType: 'SqlTask'
            #     SqlFile: '$(Pipeline.Workspace)/${{ parameters.migrationArtifactName }}/${{ artifact }}'
            #     IpDetectionMethod: 'AutoDetect'
