parameters:
  vmImage: 'ubuntu-latest'
  stageName: 'N/A'
  stageDisplayName: 'Deploy stage'
  environment: 'N/A'
  stageDependsOn: 'N/A'
  appName: 'N/A'
  azureSubscription: 'N/A'
  resourceGroupName: 'N/A'
  appSettings: ''
  generalSettings: ''
  connectionStrings: ''
  connectionStringForMigration: 'N/A'
  projectArtifactName: 'package'
  migrationArtifactName: 'migrations'
  migrationScriptList: []

stages:
- stage: ${{ parameters.stageName }}
  displayName: ${{ parameters.stageDisplayName }}
  dependsOn: ${{ parameters.stageDependsOn }}
  jobs:
  - deployment: Deploy
    displayName: 'Deploy job'
    pool:
      vmImage: ${{ parameters.vmImage }}
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureAppServiceSettings@1
            displayName: 'Replace config values'
            condition: or(ne('${{ parameters.appSettings }}', ''), ne('${{ parameters.generalSettings }}', ''), ne('${{ parameters.connectionStrings }}', ''))
            inputs:
              azureSubscription: ${{ parameters.azureSubscription }}
              appName: ${{ parameters.appName }}
              resourceGroupName: ${{ parameters.resourceGroupName }}
              appSettings: ${{ parameters.appSettings }}
              generalSettings: ${{ parameters.generalSettings }}
              connectionStrings: ${{ parameters.connectionStrings }}

          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy in App Services'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: ${{ parameters.azureSubscription }}
              appType: 'apiApp'
              WebAppName: ${{ parameters.appName }}
              packageForLinux: '$(Pipeline.Workspace)/${{ parameters.projectArtifactName }}/*.zip'

  - deployment: ApplyMigration
    displayName: 'Sql migration job'
    dependsOn:
    - Deploy
    pool:
      vmImage: windows-latest
    environment:
      name: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - ${{ each scriptName in parameters.migrationScriptList }}:
            - task: SqlAzureDacpacDeployment@1
              displayName: 'Apply migration script'
              inputs:
                azureSubscription: ${{ parameters.azureSubscription }}
                AuthenticationType: 'connectionString'
                ConnectionString: ${{ parameters.connectionStringForMigration }}
                deployType: 'SqlTask'
                SqlFile: '$(Pipeline.Workspace)/${{ parameters.migrationArtifactName }}/${{ scriptName }}'
                IpDetectionMethod: 'AutoDetect'
