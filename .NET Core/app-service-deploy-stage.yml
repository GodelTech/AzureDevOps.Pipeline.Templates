parameters:
  vmImage: 'ubuntu-latest'
  stageName: 'N/A'
  stageDisplayName: 'N/A'
  environment: 'N/A'
  dependsOn: 'N/A'
  appName: 'N/A'
  azureSubscription: 'N/A'
  resourceGroupName: 'N/A'
  appSettings: ''
  generalSettings: ''
  connectionStrings: ''

stages:
- stage: ${{ parameters.stageName }}
  displayName: '${{ parameters.stageDisplayName }}'
  dependsOn: ${{ parameters.dependsOn }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  variables:
    hasAppSettings: ne(${{ parameters.appSettings }}, '')
    hasGeneralSettings: ne('${{ parameters.generalSettings }}', '')
    hasConnectionStrings: eq('${{ parameters.connectionStrings }}', '')
  jobs:
  - deployment: Deploy
    displayName: 'Deploy'
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Variables'
            inputs:
              targetType: 'inline'
              script: |
                echo "##vso[task.logissue type=warning]hasAppSettings: ${{ parameters.appSettings }} => ${{variables.hasAppSettings}}"
                echo "##vso[task.logissue type=warning]hasGeneralSettings: ${{ parameters.generalSettings }} => ${{variables.hasGeneralSettings}}"
                echo "##vso[task.logissue type=warning]hasConnectionStrings: ${{ parameters.connectionStrings }} => ${{variables.hasConnectionStrings}}"

          - task: AzureAppServiceSettings@1
            displayName: 'Replace config values'
            condition: or(${{variables.hasAppSettings}}, ${{variables.hasGeneralSettings}}, ${{variables.hasConnectionStrings}})
            inputs:
              azureSubscription: ${{ parameters.azureSubscription }}
              appName: ${{ parameters.appName }}
              resourceGroupName: ${{ parameters.resourceGroupName }}
              appSettings: ${{ parameters.appSettings }}
              generalSettings: ${{ parameters.generalSettings }}
              connectionStrings: ${{ parameters.connectionStrings }}

          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy in App Services'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: ${{ parameters.azureSubscription }}
              appType: 'apiApp'
              WebAppName: ${{ parameters.appName }}
              packageForLinux: '$(Pipeline.Workspace)/**/*.zip'
